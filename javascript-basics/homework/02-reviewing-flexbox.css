.flex-container {
    display: flex;
    flex-direction: column;
    /* flex-direction: row puts the main axis horizontal (left-to-right), and column puts the main axis vertical (top-to-bottom) */
  }
  
  /* this selector selects all divs inside of .flex-container */
  .flex-container div {
    background: peachpuff;
    border: 4px solid brown;
    height: 80px;
    flex: 1 1 auto;
  }
  
  /* One thing to note is that in this example, flex-direction: column would not work as expected if we used the shorthand flex: 1. */
  
  /* The reason for this is that the flex shorthand expands flex-basis to 0, which means that all flex-growing and flex-shrinking would begin their calculations from 0. Empty divs by default have 0 height, so for our flex items to fill up the height of their container, they don’t actually need to have any height at all.
  
  The example above fixed this by specifying flex: 1 1 auto, telling the flex items to default to their given height. We could also have fixed it by putting a height on the parent .flex-container, or by using flex-grow: 1 instead of the shorthand. */
  
  /* Another detail to notice: when we changed the flex-direction to column, flex-basis refers to height instead of width. Given the context this may be obvious, but it’s something to be aware of. */
  